<?xml version="1.0" encoding="UTF-8"?>
<!-- 【注】参考文档:1、https://www.cnblogs.com/ClassNotFoundException/p/6641867.html 
				   2、https://www.cnblogs.com/xxoome/p/5954633.html-->
<!-- 声明xml版本以及编码格式 -->
<!-- DOCYTPE声明必须紧随其后，告知服务器试用的Servlet规范的版本。
	并指定管理此文件其余部分内容的语法的DTD(Document Type Definition，文档类型定义)。 -->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
          xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
         id="WebApp_ID" version="3.0">
         
	<!-- icon元素指出IDE和GUI工具用来表示Web应用的一个和两个图像文件的位置。 -->
	<!-- <icon>
		<small-icon></small-icon>
		<large-icon></large-icon>
	</icon> -->
	<!-- 应用名称 -->
	<display-name>GrowStep-Bloom</display-name>
	<!-- description元素给出与此有关的说明性文本。 -->
    <description>成长之花开</description>
    
    <!-- ServletContext -> (context-param) -> listener -> filter -> servlet -->
    
    <!-- 启动一个web项目的时候，WEB容器会去读取它的配置文件web.xml。读取context-param和listener节点两个 -->
    <!-- 紧接着，WEB容器创建一个ServletContext(servlet上下文)，这个web项目的所有部分都共享这个上下文。 -->
    <!-- context-param元素声明应用范围内的初始化参数 -->
    <!-- 容器将context-param转化成键值对，并交给ServeltContext。可以在servlet中通过servlet.getServletContext().getInitParameter("my_param")获得。 -->
    <!-- 容器根据listener中类的实例创建监听器。 -->
    <context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>classpath:spring-context.xml</param-value>
    </context-param>
    <!-- listener 对事件监听程序的支持，事件监听程序在建立、修改和删除会话或servlet环境时得到通知。Listener元素指出事件监听程序类。 -->
    <listener>
    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    
    <!-- filter 过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联。 -->
    <filter>
    	<filter-name>CharacterEncoding</filter-name>
    	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    	<init-param>
    		<param-name>encoding</param-name>
    		<param-value>UTF-8</param-value>
    	</init-param>
    	<init-param>
    		<param-name>forceEncoding</param-name>
    		<param-value>true</param-value>
    	</init-param>
    </filter>
    
    <!-- filter-mapping 一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联。 -->
    <filter-mapping>
    	<filter-name>CharacterEncoding</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 用来解决无法接收PUT请求参数的问题 -->
    <filter>  
        <filter-name>HttpMethodFilter</filter-name>  
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>  
    </filter>  
    <filter-mapping>  
        <filter-name>HttpMethodFilter</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping> 
    
    <!-- servlet 在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。Servlet元素就是用来完成此项任务的。 -->
    <servlet>
    	<servlet-name>springmvc</servlet-name>
    	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    	<!-- load-on-startup声明了Servlet加载顺序。 该值>=0时，值越小加载优先级越高。-->
    	<!-- 大于0表示在容器启动时就加载这个Servlet。 -->
    	<!-- 小于0则表示在被选中时才进行加载。 -->
    	<load-on-startup>1</load-on-startup> 
    </servlet>
    
    <!-- servlet-mapping 服务器一般为servlet提供一个缺省的URL：http://host/webAppPrefix/servlet/ServletName。但是，常常会更改这个URL，以便servlet可以访问初始化参数或更容易地处理相对URL。在更改缺省URL时，使用servlet-mapping元素。 -->
    <servlet-mapping>
    	<servlet-name>springmvc</servlet-name>
    	<url-pattern>/</url-pattern>
    </servlet-mapping>
    
    <!-- session-config 如果某个会话在一定时间内未被访问，服务器可以抛弃它以节省内存。可通过使用HttpSession的setMaxInactiveInterval方法明确设置单个会话对象的超时值，或者可利用session-config元素制定缺省超时值。 -->
    <session-config>
    	<session-timeout>180</session-timeout>
    </session-config>
    
    <welcome-file-list>
    	<welcome-file>/index.html</welcome-file>
    </welcome-file-list>
    <!-- mime-mapping 如果Web应用具有想到特殊的文件，希望能保证给他们分配特定的MIME类型，则mime-mapping元素提供这种保证。 -->
    <!-- MIME(多用途互联网邮件扩展类型):	Multipurpose Internet Mail Extensions -->
    <!-- 是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。
		   它是一个互联网标准，扩展了电子邮件标准，使其能够支持：
			非ASCII字符文本；非文本格式附件（二进制、声音、图像等）；由多部分（multiple parts）组成的消息体；包含非ASCII字符的头信息（Header information）。 -->
   <!--  <mime-mapping>
    	<extension>foo</extension>   
    	<mime-type>application/x-fubar</mime-type> 
    </mime-mapping>
    
    welcome-file-list元素指示服务器在收到引用一个目录名而不是文件名的URL时，使用哪个文件。
    <welcome-file-list>
    	<welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    
    error-page元素使得在返回特定HTTP状态代码时，或者特定类型的异常被抛出时，能够制定将要显示的页面。
    <error-page>
    	<exception-type>500</exception-type>
    	<location>/index.jsp</location>
    </error-page>
    
    security-constraint元素制定应该保护的URL。它与login-config元素联合使用
    <security-constraint>
    	<web-resource-collection>
    		<web-resource-name>Proprietary</web-resource-name>
    		<url-pattern>/Proprietary/*</url-pattern>
    		<http-method>GET</http-method>
    	</web-resource-collection>
    	<auth-constraint>
    		<role-name>administrator</role-name>
    	</auth-constraint>
    	<user-data-constraint>
    		<transport-guarantee>NONE</transport-guarantee>
    	</user-data-constraint>
    </security-constraint>
    
    用login-config元素来指定服务器应该怎样给试图访问受保护页面的用户授权。它与sercurity-constraint元素联合使用。
    <login-config></login-config> -->
</web-app>
