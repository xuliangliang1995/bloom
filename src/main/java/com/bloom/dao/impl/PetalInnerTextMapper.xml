<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bloom.dao.PetalInnerTextMapper">
  <resultMap id="BaseResultMap" type="com.bloom.dao.po.PetalInnerText">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="petal_id" jdbcType="INTEGER" property="petalId" />
    <result column="ct" jdbcType="TIMESTAMP" property="ct" />
    <result column="ut" jdbcType="TIMESTAMP" property="ut" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.bloom.dao.po.PetalInnerTextWithBLOBs">
    <result column="raw" jdbcType="LONGVARCHAR" property="raw" />
    <result column="text" jdbcType="LONGVARCHAR" property="text" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, petal_id, ct, ut
  </sql>
  <sql id="Blob_Column_List">
    raw, text
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.bloom.dao.po.PetalInnerTextExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from petal_inner_text
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.bloom.dao.po.PetalInnerTextExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from petal_inner_text
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from petal_inner_text
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from petal_inner_text
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bloom.dao.po.PetalInnerTextWithBLOBs">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into petal_inner_text (petal_id, ct, ut, 
      raw, text)
    values (#{petalId,jdbcType=INTEGER}, #{ct,jdbcType=TIMESTAMP}, #{ut,jdbcType=TIMESTAMP}, 
      #{raw,jdbcType=LONGVARCHAR}, #{text,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.bloom.dao.po.PetalInnerTextWithBLOBs">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into petal_inner_text
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="petalId != null">
        petal_id,
      </if>
      <if test="ct != null">
        ct,
      </if>
      <if test="ut != null">
        ut,
      </if>
      <if test="raw != null">
        raw,
      </if>
      <if test="text != null">
        text,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="petalId != null">
        #{petalId,jdbcType=INTEGER},
      </if>
      <if test="ct != null">
        #{ct,jdbcType=TIMESTAMP},
      </if>
      <if test="ut != null">
        #{ut,jdbcType=TIMESTAMP},
      </if>
      <if test="raw != null">
        #{raw,jdbcType=LONGVARCHAR},
      </if>
      <if test="text != null">
        #{text,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bloom.dao.po.PetalInnerTextWithBLOBs">
    update petal_inner_text
    <set>
      <if test="petalId != null">
        petal_id = #{petalId,jdbcType=INTEGER},
      </if>
      <if test="ct != null">
        ct = #{ct,jdbcType=TIMESTAMP},
      </if>
      <if test="ut != null">
        ut = #{ut,jdbcType=TIMESTAMP},
      </if>
      <if test="raw != null">
        raw = #{raw,jdbcType=LONGVARCHAR},
      </if>
      <if test="text != null">
        text = #{text,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.bloom.dao.po.PetalInnerTextWithBLOBs">
    update petal_inner_text
    set petal_id = #{petalId,jdbcType=INTEGER},
      ct = #{ct,jdbcType=TIMESTAMP},
      ut = #{ut,jdbcType=TIMESTAMP},
      raw = #{raw,jdbcType=LONGVARCHAR},
      text = #{text,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bloom.dao.po.PetalInnerText">
    update petal_inner_text
    set petal_id = #{petalId,jdbcType=INTEGER},
      ct = #{ct,jdbcType=TIMESTAMP},
      ut = #{ut,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>